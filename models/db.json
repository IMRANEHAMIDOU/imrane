[
  {
    "id": 2,
    "title": "Les bases de Ruby",
    "content": "Ruby est un langage de programmation interprété, dynamique et entièrement orienté objet. Il a été conçu pour être simple et intuitif, privilégiant la lisibilité et la flexibilité du code. Avec Ruby, tout est un objet, y compris les nombres et les booléens. Il supporte la programmation fonctionnelle, la gestion des exceptions et possède un riche écosystème de bibliothèques, appelées gems."
  },
  {
    "id": 3,
    "title": "Gestion des routes avec Sinatra",
    "content": "Dans Sinatra, les routes permettent de définir les points d’entrée de l’application. Une route est généralement associée à une méthode HTTP (`GET`, `POST`, `PUT`, `DELETE`) et à un bloc de code qui s’exécute lorsque cette route est appelée. Par exemple :\n\n```ruby\nget '/bonjour' do\n  'Bonjour, monde!'\nend\n```\n\nOn peut aussi récupérer des paramètres dynamiques en utilisant des placeholders comme `/:id`."
  },
  {
    "id": 4,
    "title": "Stockage des données en JSON",
    "content": "Le format JSON (JavaScript Object Notation) est couramment utilisé pour stocker et échanger des données entre un client et un serveur. En Ruby, la bibliothèque standard `json` permet de manipuler facilement des fichiers JSON. On peut lire et écrire des fichiers JSON en utilisant `File.read` et `File.write`. Dans une application Sinatra sans base de données, stocker les données en JSON est une alternative simple et efficace."
  },
  {
    "id": 5,
    "title": "Utilisation d'ERB avec Sinatra",
    "content": "ERB (Embedded Ruby) est un moteur de templates intégré à Ruby qui permet d’inclure du code Ruby dans du HTML. Il est souvent utilisé avec Sinatra pour générer des vues dynamiques. Un fichier `.erb` peut contenir du Ruby entre des balises `<% %>` pour l’exécution de code et `<%= %>` pour afficher du contenu :\n\n```html\n<h1>Bienvenue, <%= @nom %>!</h1>\n```"
  },
  {
    "id": 6,
    "title": "Déploiement d'une application Sinatra",
    "content": "Une application Sinatra peut être déployée sur divers services comme Heroku, Render ou un serveur VPS. Il est recommandé d'utiliser un serveur d'application comme Puma ou Thin pour gérer les requêtes. Pour déployer sur Heroku, on utilise :\n\n```sh\ngit init\ngit add .\ngit commit -m 'Déploiement'\nheroku create mon-app\nheroku git:remote -a mon-app\ngit push heroku main\n```"
  },
  {
    "id": 8,
    "title": "Mise en place d'un système d'authentification",
    "content": "L’authentification dans une application Sinatra peut être gérée via des sessions et des mots de passe hashés avec BCrypt. Une approche classique consiste à vérifier les identifiants de l’utilisateur et à stocker son ID dans la session après connexion."
  },
  {
    "id": 9,
    "title": "Manipulation des fichiers JSON en Ruby",
    "content": "Ruby permet de lire et d’écrire des fichiers JSON avec la bibliothèque `json`.\n\n```ruby\nrequire 'json'\ndata = JSON.parse(File.read('db.json'))\ndata << { 'id' => 16, 'title' => 'Nouveau post', 'content' => 'Contenu détaillé...' }\nFile.write('db.json', JSON.pretty_generate(data))\n```"
  },
  {
    "id": 10,
    "title": "Les middlewares dans Sinatra",
    "content": "Les middlewares sont des composants qui interceptent les requêtes avant qu'elles n’atteignent l’application. Ils peuvent être utilisés pour l’authentification, la gestion des logs ou la compression des réponses. Sinatra permet d’ajouter des middlewares avec `use`."
  },
  {
    "id": 11,
    "title": "Créer une API REST avec Sinatra",
    "content": "Sinatra est souvent utilisé pour créer des APIs REST. Une API simple pour gérer des articles ressemblerait à :\n\n```ruby\nget '/articles' do\n  content_type :json\n  JSON.generate(Article.all)\nend\n```"
  },
  {
    "id": 12,
    "title": "Les paramètres URL et formulaires en Sinatra",
    "content": "On récupère les paramètres passés dans l’URL avec `params` :\n\n```ruby\nget '/hello/:name' do\n  \"Bonjour #{params[:name]}!\"\nend\n```\n\nPour les formulaires, on utilise :\n\n```ruby\npost '/submit' do\n  \"Vous avez envoyé : #{params[:message]}\"\nend\n```"
  },
  {
    "id": 13,
    "title": "Générer du HTML avec ERB",
    "content": "ERB permet d’écrire du Ruby dans des fichiers HTML. Exemple :\n\n```html\n<ul>\n  <% @articles.each do |article| %>\n    <li><%= article['title'] %></li>\n  <% end %>\n</ul>\n```"
  },
  {
    "id": 15,
    "title": "Optimisation des performances en Sinatra",
    "content": "Quelques astuces pour améliorer la performance d’une application Sinatra :\n- Utiliser la mise en cache des réponses.\n- Employer un serveur d’application performant (Puma, Thin).\n- Compresser les réponses avec Rack::Deflater.\n- Charger les assets en mode asynchrone."
  }
]